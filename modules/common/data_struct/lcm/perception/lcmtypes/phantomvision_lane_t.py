"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class phantomvision_lane_t(object):
    __slots__ = ["id", "valid", "measured", "mark_type", "color", "quality", "location", "c0", "c1", "c2", "c3", "width_m", "view_range_start_m", "view_range_end_m", "age_secs", "pitch_rads", "camera_id"]

    LANE_MARK_DASHED = 0
    LANE_MARK_SOLID = 1
    LANE_MARK_UNDECIDED = 2
    LANE_MARK_ROAD_EDGE = 3
    LANE_MARK_DOUBLE_LANE_MARK = 4
    LANE_MARK_BOTTS_DOTTS = 5
    LANE_MARK_INVALID = 6
    LANE_COLOR_UNKNOWN = 0
    LANE_COLOR_WHITE = 1
    LANE_COLOR_YELLOW = 2
    LANE_COLOR_BLUE = 3
    LANE_COLOR_RED = 4
    LANE_COLOR_GREEN = 5
    LANE_COLOR_BLACK = 6
    LANE_QUALITY_UNAVAILABLE = 0
    LANE_QUALITY_LOW = 1
    LANE_QUALITY_MEDIUM = 2
    LANE_QUALITY_HIGH = 3
    LANE_LOCATION_UNKNOWN = 0
    LANE_LOCATION_LEFT = 1
    LANE_LOCATION_RIGHT = -1
    LANE_LOCATION_NEXT_LEFT = 2
    LANE_LOCATION_NEXT_RIGHT = -2
    LANE_LOCATION_FAR_LEFT = 3
    LANE_LOCATION_FAR_RIGHT = -3
    CAM_FRONT_CENTER = 0
    CAM_FRONT_CENTER_CROP = 1
    CAM_FRONT_CENTER_SVM = 4
    CAM_REAR_CENTER_SVM = 15
    CAM_SIDE_LEFT = 17
    CAM_SIDE_RIGHT = 18

    def __init__(self):
        self.id = 0
        self.valid = False
        self.measured = False
        self.mark_type = 0
        self.color = 0
        self.quality = 0
        self.location = 0
        self.c0 = 0.0
        self.c1 = 0.0
        self.c2 = 0.0
        self.c3 = 0.0
        self.width_m = 0.0
        self.view_range_start_m = 0.0
        self.view_range_end_m = 0.0
        self.age_secs = 0.0
        self.pitch_rads = 0.0
        self.camera_id = 0

    def encode(self):
        buf = BytesIO()
        buf.write(phantomvision_lane_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ibbbbbbfffffffffb", self.id, self.valid, self.measured, self.mark_type, self.color, self.quality, self.location, self.c0, self.c1, self.c2, self.c3, self.width_m, self.view_range_start_m, self.view_range_end_m, self.age_secs, self.pitch_rads, self.camera_id))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != phantomvision_lane_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return phantomvision_lane_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = phantomvision_lane_t()
        self.id = struct.unpack(">i", buf.read(4))[0]
        self.valid = bool(struct.unpack('b', buf.read(1))[0])
        self.measured = bool(struct.unpack('b', buf.read(1))[0])
        self.mark_type, self.color, self.quality, self.location, self.c0, self.c1, self.c2, self.c3, self.width_m, self.view_range_start_m, self.view_range_end_m, self.age_secs, self.pitch_rads, self.camera_id = struct.unpack(">bbbbfffffffffb", buf.read(41))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if phantomvision_lane_t in parents: return 0
        tmphash = (0x3694aa71b3e6342a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if phantomvision_lane_t._packed_fingerprint is None:
            phantomvision_lane_t._packed_fingerprint = struct.pack(">Q", phantomvision_lane_t._get_hash_recursive([]))
        return phantomvision_lane_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

