"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import common.point_2d_t

class lidar_3d_object_t(object):
    __slots__ = ["id", "type", "confidence", "x", "y", "length_x", "length_y", "height", "speed_x", "speed_y", "point_count", "obj_points", "track_count", "track_points"]

    __typenames__ = ["int16_t", "int8_t", "float", "float", "float", "float", "float", "float", "float", "float", "int16_t", "common.point_2d_t", "int16_t", "common.point_2d_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, ["point_count"], None, ["track_count"]]

    def __init__(self):
        self.id = 0
        self.type = 0
        self.confidence = 0.0
        self.x = 0.0
        self.y = 0.0
        self.length_x = 0.0
        self.length_y = 0.0
        self.height = 0.0
        self.speed_x = 0.0
        self.speed_y = 0.0
        self.point_count = 0
        self.obj_points = []
        self.track_count = 0
        self.track_points = []

    def encode(self):
        buf = BytesIO()
        buf.write(lidar_3d_object_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hbffffffffh", self.id, self.type, self.confidence, self.x, self.y, self.length_x, self.length_y, self.height, self.speed_x, self.speed_y, self.point_count))
        for i0 in range(self.point_count):
            assert self.obj_points[i0]._get_packed_fingerprint() == common.point_2d_t._get_packed_fingerprint()
            self.obj_points[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.track_count))
        for i0 in range(self.track_count):
            assert self.track_points[i0]._get_packed_fingerprint() == common.point_2d_t._get_packed_fingerprint()
            self.track_points[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lidar_3d_object_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lidar_3d_object_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lidar_3d_object_t()
        self.id, self.type, self.confidence, self.x, self.y, self.length_x, self.length_y, self.height, self.speed_x, self.speed_y, self.point_count = struct.unpack(">hbffffffffh", buf.read(37))
        self.obj_points = []
        for i0 in range(self.point_count):
            self.obj_points.append(common.point_2d_t._decode_one(buf))
        self.track_count = struct.unpack(">h", buf.read(2))[0]
        self.track_points = []
        for i0 in range(self.track_count):
            self.track_points.append(common.point_2d_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lidar_3d_object_t in parents: return 0
        newparents = parents + [lidar_3d_object_t]
        tmphash = (0x9b56d68149c60db0+ common.point_2d_t._get_hash_recursive(newparents)+ common.point_2d_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lidar_3d_object_t._packed_fingerprint is None:
            lidar_3d_object_t._packed_fingerprint = struct.pack(">Q", lidar_3d_object_t._get_hash_recursive([]))
        return lidar_3d_object_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

