"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class control_debug_t(object):
    __slots__ = ["utime", "vin", "license_plate", "autodrive_enable", "steering_enable", "throttle_enable", "brake_enable", "acceleration_enable", "gear_enable", "lights_enable", "maximum_user_speed", "vehicle_speed", "wheel_speed_rl", "wheel_speed_rr", "lateral_acceleration", "yaw_rate", "turn_switch", "battery_level", "throttle_status", "brake_status", "steering_angle_status", "steering_speed_status", "steering_direction_status", "gear_status", "turn_light_status", "brake_light_status", "beam_status", "horn_status", "windshield_wiper_status", "x_ego", "y_ego", "heading_angle", "distance_ego", "curvature", "lateral_position_error", "heading_angle_error", "curvature_feedforward", "understeer_gradient_feedforward", "lateral_position_error_feedback", "heading_angle_error_feedback", "lateral_controller_tire_angle_target", "longitudinal_position", "longitudinal_position_target", "longitudinal_speed", "longitudinal_speed_target", "longitudinal_acceleration", "longitudinal_acceleration_target", "throttle_command", "acceleration_command", "brake_command", "steering_angle_command", "steering_speed_command", "gear_command", "turn_light_command", "brake_light_command", "beam_command", "horn_command", "windshield_wiper_command", "pid_p_gain", "pid_i_gain", "pid_d_gain", "throttle_gain", "brake_gain", "steering_angle_target", "steering_speed_target", "light_target"]

    __typenames__ = ["int64_t", "string", "string", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "float", "float", "float", "float", "float", "float", "int8_t", "float", "float", "float", "float", "float", "int64_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "float", "float", "float", "float", "float", "float", "float", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.utime = 0
        self.vin = ""
        self.license_plate = ""
        self.autodrive_enable = 0
        self.steering_enable = 0
        self.throttle_enable = 0
        self.brake_enable = 0
        self.acceleration_enable = 0
        self.gear_enable = 0
        self.lights_enable = 0
        self.maximum_user_speed = 0.0
        self.vehicle_speed = 0.0
        self.wheel_speed_rl = 0.0
        self.wheel_speed_rr = 0.0
        self.lateral_acceleration = 0.0
        self.yaw_rate = 0.0
        self.turn_switch = 0
        self.battery_level = 0.0
        self.throttle_status = 0.0
        self.brake_status = 0.0
        self.steering_angle_status = 0.0
        self.steering_speed_status = 0.0
        self.steering_direction_status = 0
        self.gear_status = 0
        self.turn_light_status = 0
        self.brake_light_status = 0
        self.beam_status = 0
        self.horn_status = 0
        self.windshield_wiper_status = 0
        self.x_ego = 0.0
        self.y_ego = 0.0
        self.heading_angle = 0.0
        self.distance_ego = 0.0
        self.curvature = 0.0
        self.lateral_position_error = 0.0
        self.heading_angle_error = 0.0
        self.curvature_feedforward = 0.0
        self.understeer_gradient_feedforward = 0.0
        self.lateral_position_error_feedback = 0.0
        self.heading_angle_error_feedback = 0.0
        self.lateral_controller_tire_angle_target = 0.0
        self.longitudinal_position = 0.0
        self.longitudinal_position_target = 0.0
        self.longitudinal_speed = 0.0
        self.longitudinal_speed_target = 0.0
        self.longitudinal_acceleration = 0.0
        self.longitudinal_acceleration_target = 0.0
        self.throttle_command = 0.0
        self.acceleration_command = 0.0
        self.brake_command = 0.0
        self.steering_angle_command = 0.0
        self.steering_speed_command = 0.0
        self.gear_command = 0
        self.turn_light_command = 0
        self.brake_light_command = 0
        self.beam_command = 0
        self.horn_command = 0
        self.windshield_wiper_command = 0
        self.pid_p_gain = 0.0
        self.pid_i_gain = 0.0
        self.pid_d_gain = 0.0
        self.throttle_gain = 0.0
        self.brake_gain = 0.0
        self.steering_angle_target = 0.0
        self.steering_speed_target = 0.0
        self.light_target = 0

    def encode(self):
        buf = BytesIO()
        buf.write(control_debug_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __vin_encoded = self.vin.encode('utf-8')
        buf.write(struct.pack('>I', len(__vin_encoded)+1))
        buf.write(__vin_encoded)
        buf.write(b"\0")
        __license_plate_encoded = self.license_plate.encode('utf-8')
        buf.write(struct.pack('>I', len(__license_plate_encoded)+1))
        buf.write(__license_plate_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bbbbbbbffffffbfffffqbbbbbbfffffffffffffffffffffffbbbbbbfffffffb", self.autodrive_enable, self.steering_enable, self.throttle_enable, self.brake_enable, self.acceleration_enable, self.gear_enable, self.lights_enable, self.maximum_user_speed, self.vehicle_speed, self.wheel_speed_rl, self.wheel_speed_rr, self.lateral_acceleration, self.yaw_rate, self.turn_switch, self.battery_level, self.throttle_status, self.brake_status, self.steering_angle_status, self.steering_speed_status, self.steering_direction_status, self.gear_status, self.turn_light_status, self.brake_light_status, self.beam_status, self.horn_status, self.windshield_wiper_status, self.x_ego, self.y_ego, self.heading_angle, self.distance_ego, self.curvature, self.lateral_position_error, self.heading_angle_error, self.curvature_feedforward, self.understeer_gradient_feedforward, self.lateral_position_error_feedback, self.heading_angle_error_feedback, self.lateral_controller_tire_angle_target, self.longitudinal_position, self.longitudinal_position_target, self.longitudinal_speed, self.longitudinal_speed_target, self.longitudinal_acceleration, self.longitudinal_acceleration_target, self.throttle_command, self.acceleration_command, self.brake_command, self.steering_angle_command, self.steering_speed_command, self.gear_command, self.turn_light_command, self.brake_light_command, self.beam_command, self.horn_command, self.windshield_wiper_command, self.pid_p_gain, self.pid_i_gain, self.pid_d_gain, self.throttle_gain, self.brake_gain, self.steering_angle_target, self.steering_speed_target, self.light_target))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != control_debug_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return control_debug_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = control_debug_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __vin_len = struct.unpack('>I', buf.read(4))[0]
        self.vin = buf.read(__vin_len)[:-1].decode('utf-8', 'replace')
        __license_plate_len = struct.unpack('>I', buf.read(4))[0]
        self.license_plate = buf.read(__license_plate_len)[:-1].decode('utf-8', 'replace')
        self.autodrive_enable, self.steering_enable, self.throttle_enable, self.brake_enable, self.acceleration_enable, self.gear_enable, self.lights_enable, self.maximum_user_speed, self.vehicle_speed, self.wheel_speed_rl, self.wheel_speed_rr, self.lateral_acceleration, self.yaw_rate, self.turn_switch, self.battery_level, self.throttle_status, self.brake_status, self.steering_angle_status, self.steering_speed_status, self.steering_direction_status, self.gear_status, self.turn_light_status, self.brake_light_status, self.beam_status, self.horn_status, self.windshield_wiper_status, self.x_ego, self.y_ego, self.heading_angle, self.distance_ego, self.curvature, self.lateral_position_error, self.heading_angle_error, self.curvature_feedforward, self.understeer_gradient_feedforward, self.lateral_position_error_feedback, self.heading_angle_error_feedback, self.lateral_controller_tire_angle_target, self.longitudinal_position, self.longitudinal_position_target, self.longitudinal_speed, self.longitudinal_speed_target, self.longitudinal_acceleration, self.longitudinal_acceleration_target, self.throttle_command, self.acceleration_command, self.brake_command, self.steering_angle_command, self.steering_speed_command, self.gear_command, self.turn_light_command, self.brake_light_command, self.beam_command, self.horn_command, self.windshield_wiper_command, self.pid_p_gain, self.pid_i_gain, self.pid_d_gain, self.throttle_gain, self.brake_gain, self.steering_angle_target, self.steering_speed_target, self.light_target = struct.unpack(">bbbbbbbffffffbfffffqbbbbbbfffffffffffffffffffffffbbbbbbfffffffb", buf.read(193))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if control_debug_t in parents: return 0
        tmphash = (0xbb9e92d7260b9934) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if control_debug_t._packed_fingerprint is None:
            control_debug_t._packed_fingerprint = struct.pack(">Q", control_debug_t._get_hash_recursive([]))
        return control_debug_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

