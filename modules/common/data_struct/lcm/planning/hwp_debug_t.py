"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import common.point_2d_t

class hwp_debug_t(object):
    __slots__ = ["utime", "obstacle_position", "obstacle_corner_position", "obstacle_longitudinal_speed", "target_speed", "longitudinal_speed_ego", "left_lane_type", "right_lane_type", "cruising_counter", "cruising_mode", "jam_counter", "is_jam", "lane_condition", "traffic_flow_evaluation", "driver_lane_change_signal", "turn_light", "curve_index"]

    __typenames__ = ["int64_t", "common.point_2d_t", "common.point_2d_t", "float", "float", "float", "int64_t", "int64_t", "int64_t", "int64_t", "int64_t", "boolean", "boolean", "int64_t", "int64_t", "int64_t", "int64_t"]

    __dimensions__ = [None, [8], [8, 5], [8], None, None, None, None, None, None, None, None, [3], None, None, None, None]

    def __init__(self):
        self.utime = 0
        self.obstacle_position = [ common.point_2d_t() for dim0 in range(8) ]
        self.obstacle_corner_position = [ [ common.point_2d_t() for dim1 in range(5) ] for dim0 in range(8) ]
        self.obstacle_longitudinal_speed = [ 0.0 for dim0 in range(8) ]
        self.target_speed = 0.0
        self.longitudinal_speed_ego = 0.0
        self.left_lane_type = 0
        self.right_lane_type = 0
        self.cruising_counter = 0
        self.cruising_mode = 0
        self.jam_counter = 0
        self.is_jam = False
        self.lane_condition = [ False for dim0 in range(3) ]
        self.traffic_flow_evaluation = 0
        self.driver_lane_change_signal = 0
        self.turn_light = 0
        self.curve_index = 0

    def encode(self):
        buf = BytesIO()
        buf.write(hwp_debug_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        for i0 in range(8):
            assert self.obstacle_position[i0]._get_packed_fingerprint() == common.point_2d_t._get_packed_fingerprint()
            self.obstacle_position[i0]._encode_one(buf)
        for i0 in range(8):
            for i1 in range(5):
                assert self.obstacle_corner_position[i0][i1]._get_packed_fingerprint() == common.point_2d_t._get_packed_fingerprint()
                self.obstacle_corner_position[i0][i1]._encode_one(buf)
        buf.write(struct.pack('>8f', *self.obstacle_longitudinal_speed[:8]))
        buf.write(struct.pack(">ffqqqqqb", self.target_speed, self.longitudinal_speed_ego, self.left_lane_type, self.right_lane_type, self.cruising_counter, self.cruising_mode, self.jam_counter, self.is_jam))
        buf.write(struct.pack('>3b', *self.lane_condition[:3]))
        buf.write(struct.pack(">qqqq", self.traffic_flow_evaluation, self.driver_lane_change_signal, self.turn_light, self.curve_index))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != hwp_debug_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return hwp_debug_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = hwp_debug_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.obstacle_position = []
        for i0 in range(8):
            self.obstacle_position.append(common.point_2d_t._decode_one(buf))
        self.obstacle_corner_position = []
        for i0 in range(8):
            self.obstacle_corner_position.append ([])
            for i1 in range(5):
                self.obstacle_corner_position[i0].append(common.point_2d_t._decode_one(buf))
        self.obstacle_longitudinal_speed = struct.unpack('>8f', buf.read(32))
        self.target_speed, self.longitudinal_speed_ego, self.left_lane_type, self.right_lane_type, self.cruising_counter, self.cruising_mode, self.jam_counter = struct.unpack(">ffqqqqq", buf.read(48))
        self.is_jam = bool(struct.unpack('b', buf.read(1))[0])
        self.lane_condition = map(bool, struct.unpack('>3b', buf.read(3)))
        self.traffic_flow_evaluation, self.driver_lane_change_signal, self.turn_light, self.curve_index = struct.unpack(">qqqq", buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if hwp_debug_t in parents: return 0
        newparents = parents + [hwp_debug_t]
        tmphash = (0x239601e569cc5c5e+ common.point_2d_t._get_hash_recursive(newparents)+ common.point_2d_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if hwp_debug_t._packed_fingerprint is None:
            hwp_debug_t._packed_fingerprint = struct.pack(">Q", hwp_debug_t._get_hash_recursive([]))
        return hwp_debug_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

