"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import planning.body_control_unit_t

import planning.trajectory_point_t

class trajectory_path_t(object):
    __slots__ = ["utime", "x", "y", "heading_angle", "point_count", "point", "body_control_unit", "remaining_distance"]

    __typenames__ = ["int64_t", "double", "double", "double", "int16_t", "planning.trajectory_point_t", "planning.body_control_unit_t", "double"]

    __dimensions__ = [None, None, None, None, None, ["point_count"], None, None]

    def __init__(self):
        self.utime = 0
        self.x = 0.0
        self.y = 0.0
        self.heading_angle = 0.0
        self.point_count = 0
        self.point = []
        self.body_control_unit = planning.body_control_unit_t()
        self.remaining_distance = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(trajectory_path_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddh", self.utime, self.x, self.y, self.heading_angle, self.point_count))
        for i0 in range(self.point_count):
            assert self.point[i0]._get_packed_fingerprint() == planning.trajectory_point_t._get_packed_fingerprint()
            self.point[i0]._encode_one(buf)
        assert self.body_control_unit._get_packed_fingerprint() == planning.body_control_unit_t._get_packed_fingerprint()
        self.body_control_unit._encode_one(buf)
        buf.write(struct.pack(">d", self.remaining_distance))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != trajectory_path_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return trajectory_path_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = trajectory_path_t()
        self.utime, self.x, self.y, self.heading_angle, self.point_count = struct.unpack(">qdddh", buf.read(34))
        self.point = []
        for i0 in range(self.point_count):
            self.point.append(planning.trajectory_point_t._decode_one(buf))
        self.body_control_unit = planning.body_control_unit_t._decode_one(buf)
        self.remaining_distance = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if trajectory_path_t in parents: return 0
        newparents = parents + [trajectory_path_t]
        tmphash = (0xd3c83024685d58ec+ planning.trajectory_point_t._get_hash_recursive(newparents)+ planning.body_control_unit_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if trajectory_path_t._packed_fingerprint is None:
            trajectory_path_t._packed_fingerprint = struct.pack(">Q", trajectory_path_t._get_hash_recursive([]))
        return trajectory_path_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

