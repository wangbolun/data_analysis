"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class body_control_unit_t(object):
    __slots__ = ["turn_signal", "gear", "beam_intensity", "is_horn_engaged", "is_parking_brake_engaged", "is_hazard_light_engaged", "is_emergency_stop_engaged"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "boolean", "boolean", "boolean", "boolean"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.turn_signal = 0
        self.gear = 0
        self.beam_intensity = 0
        self.is_horn_engaged = False
        self.is_parking_brake_engaged = False
        self.is_hazard_light_engaged = False
        self.is_emergency_stop_engaged = False

    def encode(self):
        buf = BytesIO()
        buf.write(body_control_unit_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbbbb", self.turn_signal, self.gear, self.beam_intensity, self.is_horn_engaged, self.is_parking_brake_engaged, self.is_hazard_light_engaged, self.is_emergency_stop_engaged))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != body_control_unit_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return body_control_unit_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = body_control_unit_t()
        self.turn_signal, self.gear, self.beam_intensity = struct.unpack(">bbb", buf.read(3))
        self.is_horn_engaged = bool(struct.unpack('b', buf.read(1))[0])
        self.is_parking_brake_engaged = bool(struct.unpack('b', buf.read(1))[0])
        self.is_hazard_light_engaged = bool(struct.unpack('b', buf.read(1))[0])
        self.is_emergency_stop_engaged = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if body_control_unit_t in parents: return 0
        tmphash = (0x690c0b807eaa426d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if body_control_unit_t._packed_fingerprint is None:
            body_control_unit_t._packed_fingerprint = struct.pack(">Q", body_control_unit_t._get_hash_recursive([]))
        return body_control_unit_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

