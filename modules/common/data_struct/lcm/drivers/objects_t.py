"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import drivers.point_obj_t

class objects_t(object):
    __slots__ = ["object_number", "objects"]

    __typenames__ = ["int32_t", "drivers.point_obj_t"]

    __dimensions__ = [None, ["object_number"]]

    def __init__(self):
        self.object_number = 0
        self.objects = []

    def encode(self):
        buf = BytesIO()
        buf.write(objects_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.object_number))
        for i0 in range(self.object_number):
            assert self.objects[i0]._get_packed_fingerprint() == drivers.point_obj_t._get_packed_fingerprint()
            self.objects[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != objects_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return objects_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = objects_t()
        self.object_number = struct.unpack(">i", buf.read(4))[0]
        self.objects = []
        for i0 in range(self.object_number):
            self.objects.append(drivers.point_obj_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if objects_t in parents: return 0
        newparents = parents + [objects_t]
        tmphash = (0x94a79e841fa08fb1+ drivers.point_obj_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if objects_t._packed_fingerprint is None:
            objects_t._packed_fingerprint = struct.pack(">Q", objects_t._get_hash_recursive([]))
        return objects_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

